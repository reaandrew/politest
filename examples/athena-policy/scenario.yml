# ACME EC2 Instance Profile Athena Policy Tests
# Transposed from legacy bash/JSON test framework to politest

policy_template: "policies/ACME_EC2InstanceProfile_AthenaPolicy.json"

# Include organizational SCPs
scp_paths:
  - "scp/*.json"

# Variables for policy and tests
vars:
  # Account IDs (lowercase for tests)
  dummy_account_id: "123456789123"
  dns_hub_dev_account_id: "123456789123"
  dns_hub_live_account_id: "123456789124"
  account_id_3: "123456789125"

  # Account IDs (uppercase for policy)
  ACCOUNT_NO: "123456789123"
  DNS_HUB_DEV_ACCOUNT_ID: "123456789123"
  DNS_HUB_LIVE_ACCOUNT_ID: "123456789124"

  # AWS Organization paths (lowercase for tests)
  data_plane_nonprod_org_path: "o-123abc1234/r-reei"
  data_plane_prod_org_path: "o-123abc1234/r-abcd"

  # AWS Organization paths (uppercase for policy)
  DATA_PLANE_NONPROD_ORG_PATH: "o-123abc1234/r-reei"
  DATA_PLANE_PROD_ORG_PATH: "o-123abc1234/r-abcd"

  # Region
  region: "eu-west-2"

# Test collection format
tests:
  # Test 1: AthenaActionsAllow
  - name: "AthenaActionsAllow"
    actions:
      - "athena:ListEngineVersions"
      - "athena:ListTagsForResource"
      - "athena:ListWorkGroups"
    resource: "*"
    expect: "allowed"

  # Test 2: AthenaWorkgroupActionsAllow
  - name: "AthenaWorkgroupActionsAllow"
    actions:
      - "athena:BatchGetNamedQuery"
      - "athena:BatchGetPreparedStatement"
      - "athena:BatchGetQueryExecution"
      - "athena:CreateNamedQuery"
      - "athena:CreatePreparedStatement"
      - "athena:DeleteNamedQuery"
      - "athena:DeletePreparedStatement"
      - "athena:GetNamedQuery"
      - "athena:GetPreparedStatement"
      - "athena:GetQueryExecution"
      - "athena:GetQueryResults"
      - "athena:GetQueryResultsStream"
      - "athena:GetQueryRuntimeStatistics"
      - "athena:GetWorkGroup"
      - "athena:ListNamedQueries"
      - "athena:ListPreparedStatements"
      - "athena:ListQueryExecutions"
      - "athena:StartQueryExecution"
      - "athena:StopQueryExecution"
      - "athena:UpdateNamedQuery"
      - "athena:UpdatePreparedStatement"
    resources:
      - "arn:aws:athena:{{.region}}:{{.dns_hub_dev_account_id}}:workgroup/*"
      - "arn:aws:athena:{{.region}}:{{.dns_hub_live_account_id}}:workgroup/*"
      - "arn:aws:athena:{{.region}}:{{.account_id_3}}:workgroup/*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "aws:ResourceOrgPaths"
        ContextKeyValues: ["{{.data_plane_nonprod_org_path}}/*"]
        ContextKeyType: "string"
      - ContextKeyName: "aws:VpceAccount"
        ContextKeyValues: ["{{.dns_hub_dev_account_id}}"]
        ContextKeyType: "string"
    expect: "allowed"

  # Test 3: S3BucketActionsAllow
  - name: "S3BucketActionsAllow"
    actions:
      - "s3:GetBucketLocation"
      - "s3:ListBucket"
    resource: "arn:aws:s3:::*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dummy_account_id}}"]
        ContextKeyType: "string"
    expect: "allowed"

  # Test 4: S3ObjectActionsAllow
  - name: "S3ObjectActionsAllow"
    actions:
      - "s3:AbortMultipartUpload"
      - "s3:GetObject"
      - "s3:ListMultipartUploadParts"
      - "s3:PutObject"
    resource: "arn:aws:s3:::*/*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dummy_account_id}}"]
        ContextKeyType: "string"
      - ContextKeyName: "s3:x-amz-server-side-encryption-aws-kms-key-id"
        ContextKeyValues: ["arn:aws:kms:{{.region}}:{{.dummy_account_id}}:key/*"]
        ContextKeyType: "string"
    expect: "allowed"

  # Test 5: AthenaWorkgroupActionsDeny
  - name: "AthenaWorkgroupActionsDeny"
    actions:
      - "athena:BatchGetNamedQuery"
      - "athena:BatchGetPreparedStatement"
      - "athena:BatchGetQueryExecution"
      - "athena:CancelQueryExecution"
      - "athena:CreateNamedQuery"
      - "athena:CreateNotebook"
      - "athena:CreatePreparedStatement"
      - "athena:CreatePresignedNotebookUrl"
      - "athena:CreateWorkGroup"
      - "athena:DeleteNamedQuery"
      - "athena:DeleteNotebook"
      - "athena:DeletePreparedStatement"
      - "athena:DeleteWorkGroup"
      - "athena:ExportNotebook"
      - "athena:GetCalculationExecution"
      - "athena:GetCalculationExecutionCode"
      - "athena:GetCalculationExecutionStatus"
      - "athena:GetNamedQuery"
      - "athena:GetNotebookMetadata"
      - "athena:GetPreparedStatement"
      - "athena:GetQueryExecution"
      - "athena:GetQueryResults"
      - "athena:GetQueryResultsStream"
      - "athena:GetQueryRuntimeStatistics"
      - "athena:GetSession"
      - "athena:GetSessionStatus"
      - "athena:GetWorkGroup"
      - "athena:ImportNotebook"
      - "athena:ListCalculationExecutions"
      - "athena:ListNamedQueries"
      - "athena:ListNotebookMetadata"
      - "athena:ListNotebookSessions"
      - "athena:ListPreparedStatements"
      - "athena:ListQueryExecutions"
      - "athena:ListSessions"
      - "athena:ListTagsForResource"
      - "athena:PutCapacityAssignmentConfiguration"
      - "athena:StartCalculationExecution"
      - "athena:StartQueryExecution"
      - "athena:StartSession"
      - "athena:StopCalculationExecution"
      - "athena:StopQueryExecution"
      - "athena:TagResource"
      - "athena:TerminateSession"
      - "athena:UntagResource"
      - "athena:UpdateNamedQuery"
      - "athena:UpdateNotebook"
      - "athena:UpdateNotebookMetadata"
      - "athena:UpdatePreparedStatement"
      - "athena:UpdateWorkGroup"
    resource: "arn:aws:athena:*:*:workgroup/primary"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "aws:ResourceOrgPaths"
        ContextKeyValues: ["{{.data_plane_nonprod_org_path}}/*"]
        ContextKeyType: "string"
      - ContextKeyName: "aws:VpceAccount"
        ContextKeyValues: ["{{.dns_hub_dev_account_id}}"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 6: AthenaWorkgroupNonProdQueryActionsDeny
  - name: "AthenaWorkgroupNonProdQueryActionsDeny"
    actions:
      - "athena:BatchGetNamedQuery"
      - "athena:BatchGetPreparedStatement"
      - "athena:BatchGetQueryExecution"
      - "athena:CancelQueryExecution"
      - "athena:CreateNamedQuery"
      - "athena:CreateNotebook"
      - "athena:CreatePreparedStatement"
      - "athena:CreatePresignedNotebookUrl"
      - "athena:CreateWorkGroup"
      - "athena:DeleteNamedQuery"
      - "athena:DeleteNotebook"
      - "athena:DeletePreparedStatement"
      - "athena:DeleteWorkGroup"
      - "athena:ExportNotebook"
      - "athena:GetCalculationExecution"
      - "athena:GetCalculationExecutionCode"
      - "athena:GetCalculationExecutionStatus"
      - "athena:GetNamedQuery"
      - "athena:GetNotebookMetadata"
      - "athena:GetPreparedStatement"
      - "athena:GetQueryExecution"
      - "athena:GetQueryResults"
      - "athena:GetQueryResultsStream"
      - "athena:GetQueryRuntimeStatistics"
      - "athena:GetSession"
      - "athena:GetSessionStatus"
      - "athena:GetWorkGroup"
      - "athena:ImportNotebook"
      - "athena:ListCalculationExecutions"
      - "athena:ListNamedQueries"
      - "athena:ListNotebookMetadata"
      - "athena:ListNotebookSessions"
      - "athena:ListPreparedStatements"
      - "athena:ListQueryExecutions"
      - "athena:ListSessions"
      - "athena:ListTagsForResource"
      - "athena:PutCapacityAssignmentConfiguration"
      - "athena:StartCalculationExecution"
      - "athena:StartQueryExecution"
      - "athena:StartSession"
      - "athena:StopCalculationExecution"
      - "athena:StopQueryExecution"
      - "athena:TagResource"
      - "athena:TerminateSession"
      - "athena:UntagResource"
      - "athena:UpdateNamedQuery"
      - "athena:UpdateNotebook"
      - "athena:UpdateNotebookMetadata"
      - "athena:UpdatePreparedStatement"
      - "athena:UpdateWorkGroup"
    resource: "arn:aws:athena:*:*:workgroup/*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "aws:ResourceOrgPaths"
        ContextKeyValues: ["{{.data_plane_nonprod_org_path}}/*"]
        ContextKeyType: "string"
      - ContextKeyName: "aws:VpceAccount"
        ContextKeyValues: ["{{.dns_hub_live_account_id}}"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 7: AthenaWorkgroupProdQueryActionsDeny
  - name: "AthenaWorkgroupProdQueryActionsDeny"
    actions:
      - "athena:BatchGetNamedQuery"
      - "athena:BatchGetPreparedStatement"
      - "athena:BatchGetQueryExecution"
      - "athena:CancelQueryExecution"
      - "athena:CreateNamedQuery"
      - "athena:CreateNotebook"
      - "athena:CreatePreparedStatement"
      - "athena:CreatePresignedNotebookUrl"
      - "athena:CreateWorkGroup"
      - "athena:DeleteNamedQuery"
      - "athena:DeleteNotebook"
      - "athena:DeletePreparedStatement"
      - "athena:DeleteWorkGroup"
      - "athena:ExportNotebook"
      - "athena:GetCalculationExecution"
      - "athena:GetCalculationExecutionCode"
      - "athena:GetCalculationExecutionStatus"
      - "athena:GetNamedQuery"
      - "athena:GetNotebookMetadata"
      - "athena:GetPreparedStatement"
      - "athena:GetQueryExecution"
      - "athena:GetQueryResults"
      - "athena:GetQueryResultsStream"
      - "athena:GetQueryRuntimeStatistics"
      - "athena:GetSession"
      - "athena:GetSessionStatus"
      - "athena:GetWorkGroup"
      - "athena:ImportNotebook"
      - "athena:ListCalculationExecutions"
      - "athena:ListNamedQueries"
      - "athena:ListNotebookMetadata"
      - "athena:ListNotebookSessions"
      - "athena:ListPreparedStatements"
      - "athena:ListQueryExecutions"
      - "athena:ListSessions"
      - "athena:ListTagsForResource"
      - "athena:PutCapacityAssignmentConfiguration"
      - "athena:StartCalculationExecution"
      - "athena:StartQueryExecution"
      - "athena:StartSession"
      - "athena:StopCalculationExecution"
      - "athena:StopQueryExecution"
      - "athena:TagResource"
      - "athena:TerminateSession"
      - "athena:UntagResource"
      - "athena:UpdateNamedQuery"
      - "athena:UpdateNotebook"
      - "athena:UpdateNotebookMetadata"
      - "athena:UpdatePreparedStatement"
      - "athena:UpdateWorkGroup"
    resource: "arn:aws:athena:*:*:workgroup/*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "aws:ResourceOrgPaths"
        ContextKeyValues: ["{{.data_plane_prod_org_path}}/*"]
        ContextKeyType: "string"
      - ContextKeyName: "aws:VpceAccount"
        ContextKeyValues: ["{{.dns_hub_dev_account_id}}"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 8: S3BucketAccountBucketActionsDeny
  - name: "S3BucketAccountBucketActionsDeny"
    actions:
      - "s3:CreateBucket"
      - "s3:CreateBucketMetadataTableConfiguration"
      - "s3:DeleteBucket"
      - "s3:DeleteBucketMetadataTableConfiguration"
      - "s3:DeleteBucketPolicy"
      - "s3:DeleteBucketWebsite"
      - "s3:PutAccelerateConfiguration"
      - "s3:PutAnalyticsConfiguration"
      - "s3:PutBucketAcl"
      - "s3:PutBucketCORS"
      - "s3:PutBucketLogging"
      - "s3:PutBucketNotification"
      - "s3:PutBucketObjectLockConfiguration"
      - "s3:PutBucketOwnershipControls"
      - "s3:PutBucketPolicy"
      - "s3:PutBucketPublicAccessBlock"
      - "s3:PutBucketRequestPayment"
      - "s3:PutBucketTagging"
      - "s3:PutBucketVersioning"
      - "s3:PutBucketWebsite"
      - "s3:PutEncryptionConfiguration"
      - "s3:PutIntelligentTieringConfiguration"
      - "s3:PutInventoryConfiguration"
      - "s3:PutLifecycleConfiguration"
      - "s3:PutMetricsConfiguration"
    resource: "arn:aws:s3:::{{.dummy_account_id}}-*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dummy_account_id}}"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 9: S3ObjectAccountObjectActionsDeny
  - name: "S3ObjectAccountObjectActionsDeny"
    actions:
      - "s3:DeleteObject"
      - "s3:DeleteObjectTagging"
      - "s3:DeleteObjectVersion"
      - "s3:DeleteObjectVersionTagging"
      - "s3:GetObject"
      - "s3:GetObjectAcl"
      - "s3:GetObjectAttributes"
      - "s3:GetObjectLegalHold"
      - "s3:GetObjectRetention"
      - "s3:GetObjectTagging"
      - "s3:GetObjectTorrent"
      - "s3:GetObjectVersion"
      - "s3:GetObjectVersionAcl"
      - "s3:GetObjectVersionAttributes"
      - "s3:GetObjectVersionForReplication"
      - "s3:GetObjectVersionTagging"
      - "s3:GetObjectVersionTorrent"
      - "s3:PutObject"
      - "s3:PutObjectAcl"
      - "s3:PutObjectLegalHold"
      - "s3:PutObjectRetention"
      - "s3:PutObjectTagging"
      - "s3:PutObjectVersionAcl"
      - "s3:PutObjectVersionTagging"
      - "s3:RestoreObject"
    resource: "arn:aws:s3:::{{.dummy_account_id}}-*/*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dummy_account_id}}"]
        ContextKeyType: "string"
      - ContextKeyName: "s3:x-amz-server-side-encryption-aws-kms-key-id"
        ContextKeyValues: ["arn:aws:kms:{{.region}}:{{.dummy_account_id}}:key/*"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 10: S3ObjectAclActionsDeny
  - name: "S3ObjectAclActionsDeny"
    actions:
      - "s3:PutObjectAcl"
      - "s3:PutObjectVersionAcl"
    resource: "arn:aws:s3:::*/*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dummy_account_id}}"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 11: S3ObjectCalledViaActionsDeny_InvalidCalledVia
  - name: "S3ObjectCalledViaActionsDeny_InvalidCalledVia"
    actions:
      - "s3:AbortMultipartUpload"
      - "s3:BypassGovernanceRetention"
      - "s3:DeleteObject"
      - "s3:DeleteObjectTagging"
      - "s3:DeleteObjectVersion"
      - "s3:DeleteObjectVersionTagging"
      - "s3:GetObject"
      - "s3:GetObjectAcl"
      - "s3:GetObjectAttributes"
      - "s3:GetObjectLegalHold"
      - "s3:GetObjectRetention"
      - "s3:GetObjectTagging"
      - "s3:GetObjectVersion"
      - "s3:GetObjectVersionAcl"
      - "s3:GetObjectVersionAttributes"
      - "s3:GetObjectVersionTagging"
      - "s3:ListMultipartUploadParts"
      - "s3:PutObject"
      - "s3:PutObjectAcl"
      - "s3:PutObjectLegalHold"
      - "s3:PutObjectRetention"
      - "s3:PutObjectTagging"
      - "s3:PutObjectVersionAcl"
      - "s3:PutObjectVersionTagging"
      - "s3:RestoreObject"
    resource: "arn:aws:s3:::*/*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["dynamodb.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dummy_account_id}}"]
        ContextKeyType: "string"
      - ContextKeyName: "s3:x-amz-server-side-encryption-aws-kms-key-id"
        ContextKeyValues: ["arn:aws:kms:{{.region}}:{{.dummy_account_id}}:key/*"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 12: S3ObjectCalledViaActionsDeny_NoCalledVia
  - name: "S3ObjectCalledViaActionsDeny_NoCalledVia"
    actions:
      - "s3:AbortMultipartUpload"
      - "s3:BypassGovernanceRetention"
      - "s3:DeleteObject"
      - "s3:DeleteObjectTagging"
      - "s3:DeleteObjectVersion"
      - "s3:DeleteObjectVersionTagging"
      - "s3:GetObject"
      - "s3:GetObjectAcl"
      - "s3:GetObjectAttributes"
      - "s3:GetObjectLegalHold"
      - "s3:GetObjectRetention"
      - "s3:GetObjectTagging"
      - "s3:GetObjectVersion"
      - "s3:GetObjectVersionAcl"
      - "s3:GetObjectVersionAttributes"
      - "s3:GetObjectVersionTagging"
      - "s3:ListMultipartUploadParts"
      - "s3:PutObject"
      - "s3:PutObjectAcl"
      - "s3:PutObjectLegalHold"
      - "s3:PutObjectRetention"
      - "s3:PutObjectTagging"
      - "s3:PutObjectVersionAcl"
      - "s3:PutObjectVersionTagging"
      - "s3:RestoreObject"
    resource: "arn:aws:s3:::*/*"
    expect: "explicitDeny"

  # Test 13: S3ObjectEncryptionActionsDeny
  - name: "S3ObjectEncryptionActionsDeny"
    actions:
      - "s3:PutObject"
    resource: "arn:aws:s3:::testbucket/testobject"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dummy_account_id}}"]
        ContextKeyType: "string"
    expect: "explicitDeny"

  # Test 14: S3ResourceOwnerActionsDeny
  - name: "S3ResourceOwnerActionsDeny"
    actions:
      - "s3:AbortMultipartUpload"
      - "s3:BypassGovernanceRetention"
      - "s3:CreateBucket"
      - "s3:CreateBucketMetadataTableConfiguration"
      - "s3:DeleteBucket"
      - "s3:DeleteBucketMetadataTableConfiguration"
      - "s3:DeleteBucketPolicy"
      - "s3:DeleteBucketWebsite"
      - "s3:DeleteObject"
      - "s3:DeleteObjectTagging"
      - "s3:DeleteObjectVersion"
      - "s3:DeleteObjectVersionTagging"
      - "s3:GetAccelerateConfiguration"
      - "s3:GetAnalyticsConfiguration"
      - "s3:GetBucketAcl"
      - "s3:GetBucketCORS"
      - "s3:GetBucketLocation"
      - "s3:GetBucketLogging"
      - "s3:GetBucketMetadataTableConfiguration"
      - "s3:GetBucketNotification"
      - "s3:GetBucketObjectLockConfiguration"
      - "s3:GetBucketOwnershipControls"
      - "s3:GetBucketPolicy"
      - "s3:GetBucketPolicyStatus"
      - "s3:GetBucketPublicAccessBlock"
      - "s3:GetBucketRequestPayment"
      - "s3:GetBucketTagging"
      - "s3:GetBucketVersioning"
      - "s3:GetBucketWebsite"
      - "s3:GetEncryptionConfiguration"
      - "s3:GetIntelligentTieringConfiguration"
      - "s3:GetInventoryConfiguration"
      - "s3:GetLifecycleConfiguration"
      - "s3:GetMetricsConfiguration"
      - "s3:GetObject"
      - "s3:GetObjectAcl"
      - "s3:GetObjectAttributes"
      - "s3:GetObjectLegalHold"
      - "s3:GetObjectRetention"
      - "s3:GetObjectTagging"
      - "s3:GetObjectTorrent"
      - "s3:GetObjectVersion"
      - "s3:GetObjectVersionAcl"
      - "s3:GetObjectVersionAttributes"
      - "s3:GetObjectVersionForReplication"
      - "s3:GetObjectVersionTagging"
      - "s3:GetObjectVersionTorrent"
      - "s3:GetReplicationConfiguration"
      - "s3:InitiateReplication"
      - "s3:ListBucket"
      - "s3:ListBucketMultipartUploads"
      - "s3:ListBucketVersions"
      - "s3:ListMultipartUploadParts"
      - "s3:ObjectOwnerOverrideToBucketOwner"
      - "s3:PauseReplication"
      - "s3:PutAccelerateConfiguration"
      - "s3:PutAnalyticsConfiguration"
      - "s3:PutBucketAcl"
      - "s3:PutBucketCORS"
      - "s3:PutBucketLogging"
      - "s3:PutBucketNotification"
      - "s3:PutBucketObjectLockConfiguration"
      - "s3:PutBucketOwnershipControls"
      - "s3:PutBucketPolicy"
      - "s3:PutBucketPublicAccessBlock"
      - "s3:PutBucketRequestPayment"
      - "s3:PutBucketTagging"
      - "s3:PutBucketVersioning"
      - "s3:PutBucketWebsite"
      - "s3:PutEncryptionConfiguration"
      - "s3:PutIntelligentTieringConfiguration"
      - "s3:PutInventoryConfiguration"
      - "s3:PutLifecycleConfiguration"
      - "s3:PutMetricsConfiguration"
      - "s3:PutObject"
      - "s3:PutObjectAcl"
      - "s3:PutObjectLegalHold"
      - "s3:PutObjectRetention"
      - "s3:PutObjectTagging"
      - "s3:PutObjectVersionAcl"
      - "s3:PutObjectVersionTagging"
      - "s3:PutReplicationConfiguration"
      - "s3:ReplicateDelete"
      - "s3:ReplicateObject"
      - "s3:ReplicateTags"
      - "s3:RestoreObject"
    resource: "arn:aws:s3:::*"
    context:
      - ContextKeyName: "aws:CalledVia"
        ContextKeyValues: ["athena.amazonaws.com"]
        ContextKeyType: "stringList"
      - ContextKeyName: "s3:ResourceAccount"
        ContextKeyValues: ["{{.dns_hub_live_account_id}}"]
        ContextKeyType: "string"
      - ContextKeyName: "s3:x-amz-server-side-encryption-aws-kms-key-id"
        ContextKeyValues: ["arn:aws:kms:{{.region}}:{{.dummy_account_id}}:key/*"]
        ContextKeyType: "string"
    expect: "explicitDeny"
