name: SLSA Release

on:
  release:
    types: [published]

permissions:
  contents: read

env:
  GO_VERSION: '1.24'

jobs:
  prepare-build-metadata:
    name: Prepare Build Metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.metadata.outputs.version }}
      commit: ${{ steps.metadata.outputs.commit }}
      build_date: ${{ steps.metadata.outputs.build_date }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Generate build metadata
        id: metadata
        run: |
          # Extract version from release tag
          VERSION="${{ github.event.release.tag_name }}"

          # Get commit SHA from release
          COMMIT="${{ github.event.release.target_commitish }}"

          # Use ISO 8601 basic format without colons for SLSA compatibility
          BUILD_DATE=$(date -u +%Y%m%dT%H%M%SZ)

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "Generated metadata: version=${VERSION}, commit=${COMMIT}, date=${BUILD_DATE}"

  slsa-build-linux-amd64:
    name: SLSA Build linux-amd64
    needs: [prepare-build-metadata]
    permissions:
      id-token: write  # To sign the provenance
      contents: write  # To upload assets to release
      actions: read    # To read the workflow path
    # SLSA builders require tag refs (not SHAs) - this is a SLSA framework requirement
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0  # NOSONAR
    with:
      go-version: "1.24"
      config-file: .slsa-goreleaser/linux-amd64.yml
      evaluated-envs: "GO_VERSION:${{ needs.prepare-build-metadata.outputs.version }}, GO_COMMIT:${{ needs.prepare-build-metadata.outputs.commit }}, GO_BUILD_DATE:${{ needs.prepare-build-metadata.outputs.build_date }}"
      upload-assets: true

  slsa-build-linux-arm64:
    name: SLSA Build linux-arm64
    needs: [prepare-build-metadata]
    permissions:
      id-token: write
      contents: write
      actions: read
    # SLSA builders require tag refs (not SHAs) - this is a SLSA framework requirement
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0  # NOSONAR
    with:
      go-version: "1.24"
      config-file: .slsa-goreleaser/linux-arm64.yml
      evaluated-envs: "GO_VERSION:${{ needs.prepare-build-metadata.outputs.version }}, GO_COMMIT:${{ needs.prepare-build-metadata.outputs.commit }}, GO_BUILD_DATE:${{ needs.prepare-build-metadata.outputs.build_date }}"
      upload-assets: true

  slsa-build-darwin-amd64:
    name: SLSA Build darwin-amd64
    needs: [prepare-build-metadata]
    permissions:
      id-token: write
      contents: write
      actions: read
    # SLSA builders require tag refs (not SHAs) - this is a SLSA framework requirement
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0  # NOSONAR
    with:
      go-version: "1.24"
      config-file: .slsa-goreleaser/darwin-amd64.yml
      evaluated-envs: "GO_VERSION:${{ needs.prepare-build-metadata.outputs.version }}, GO_COMMIT:${{ needs.prepare-build-metadata.outputs.commit }}, GO_BUILD_DATE:${{ needs.prepare-build-metadata.outputs.build_date }}"
      upload-assets: true

  slsa-build-darwin-arm64:
    name: SLSA Build darwin-arm64
    needs: [prepare-build-metadata]
    permissions:
      id-token: write
      contents: write
      actions: read
    # SLSA builders require tag refs (not SHAs) - this is a SLSA framework requirement
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0  # NOSONAR
    with:
      go-version: "1.24"
      config-file: .slsa-goreleaser/darwin-arm64.yml
      evaluated-envs: "GO_VERSION:${{ needs.prepare-build-metadata.outputs.version }}, GO_COMMIT:${{ needs.prepare-build-metadata.outputs.commit }}, GO_BUILD_DATE:${{ needs.prepare-build-metadata.outputs.build_date }}"
      upload-assets: true

  slsa-build-windows-amd64:
    name: SLSA Build windows-amd64
    needs: [prepare-build-metadata]
    permissions:
      id-token: write
      contents: write
      actions: read
    # SLSA builders require tag refs (not SHAs) - this is a SLSA framework requirement
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0  # NOSONAR
    with:
      go-version: "1.24"
      config-file: .slsa-goreleaser/windows-amd64.yml
      evaluated-envs: "GO_VERSION:${{ needs.prepare-build-metadata.outputs.version }}, GO_COMMIT:${{ needs.prepare-build-metadata.outputs.commit }}, GO_BUILD_DATE:${{ needs.prepare-build-metadata.outputs.build_date }}"
      upload-assets: true

  slsa-build-windows-arm64:
    name: SLSA Build windows-arm64
    needs: [prepare-build-metadata]
    permissions:
      id-token: write
      contents: write
      actions: read
    # SLSA builders require tag refs (not SHAs) - this is a SLSA framework requirement
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0  # NOSONAR
    with:
      go-version: "1.24"
      config-file: .slsa-goreleaser/windows-arm64.yml
      evaluated-envs: "GO_VERSION:${{ needs.prepare-build-metadata.outputs.version }}, GO_COMMIT:${{ needs.prepare-build-metadata.outputs.commit }}, GO_BUILD_DATE:${{ needs.prepare-build-metadata.outputs.build_date }}"
      upload-assets: true

  github-attestations:
    name: Generate GitHub Attestations
    runs-on: ubuntu-latest
    needs: [slsa-build-linux-amd64, slsa-build-linux-arm64, slsa-build-darwin-amd64, slsa-build-darwin-arm64, slsa-build-windows-amd64, slsa-build-windows-arm64]
    permissions:
      id-token: write  # For Sigstore signing
      contents: write  # To read release assets
      attestations: write  # To create attestations
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Download release assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Download all binary assets from the release (not .intoto.jsonl files)
          gh release download ${{ github.event.release.tag_name }} \
            --repo ${{ github.repository }} \
            --pattern 'politest-*' \
            --skip-existing

          # List downloaded files
          ls -lh politest-*

          # Exclude .intoto.jsonl files from attestation (they're already attestations)
          rm -f *.intoto.jsonl || true

      - name: Attest linux-amd64 binary
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: politest-linux-amd64

      - name: Attest linux-arm64 binary
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: politest-linux-arm64

      - name: Attest darwin-amd64 binary
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: politest-darwin-amd64

      - name: Attest darwin-arm64 binary
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: politest-darwin-arm64

      - name: Attest windows-amd64 binary
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: politest-windows-amd64

      - name: Attest windows-arm64 binary
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: politest-windows-arm64
