name: CI

on:
  push:
    branches: [ 'main' ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  GO_VERSION: '1.24'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run gofmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Setup Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  gitguardian-scan:
    name: GitGuardian Repository History Scan
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      with:
        fetch-depth: 0

    - name: Install ggshield
      run: pip install ggshield

    - name: GitGuardian scan repository history
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      # Continue on error when secret is not available (e.g., PRs from forks)
      continue-on-error: true
      run: |
        if [ -z "$GITGUARDIAN_API_KEY" ]; then
          echo "⚠️  GitGuardian API key not available (likely a fork PR). Skipping scan."
          exit 0
        fi
        ggshield secret scan repo .

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [lint-and-test, dependency-scan, gitguardian-scan]

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download coverage reports
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: coverage-reports

    - name: SonarCloud Scan
      id: sonar-scan
      uses: SonarSource/sonarqube-scan-action@40f5b61913e891f9d316696628698051136015be # master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.qualitygate.wait=false
      continue-on-error: true

    - name: Check Quality Gate Status
      if: steps.sonar-scan.outcome == 'success'
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      run: |
        project_key="reaandrew_politest"

        # Get the analysis task ID from the report-task.txt generated by the scanner
        task_id=$(grep 'ceTaskId' .scannerwork/report-task.txt | cut -d= -f2)

        # Poll until analysis is complete with timeout protection
        max_attempts=60  # 60 attempts * 5 seconds = 5 minutes max
        attempt=0
        while [ $attempt -lt $max_attempts ] ; do
          status=$(curl -s --max-time 10 --connect-timeout 5 -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$task_id" | jq -r .task.status)
          if [ "$status" = "SUCCESS" ]; then
            analysis_id=$(curl -s --max-time 10 --connect-timeout 5 -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$task_id" | jq -r .task.analysisId)
            break
          elif [ "$status" = "FAILED" ]; then
            echo "SonarQube analysis failed."
            exit 1
          fi
          echo "Waiting for analysis to complete... (attempt $((attempt+1))/$max_attempts)"
          sleep 5
          attempt=$((attempt+1))
        done

        if [ $attempt -eq $max_attempts ]; then
          echo "Timeout waiting for SonarCloud analysis to complete after 5 minutes"
          exit 1
        fi

        # Get Quality Gate status and condition results
        response=$(curl -s --max-time 10 --connect-timeout 5 -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$analysis_id")
        gate_status=$(echo "$response" | jq -r .projectStatus.status)
        echo "Quality Gate Status: $gate_status"

        # Show all conditions for debugging
        echo "=== All Quality Gate Conditions ==="
        echo "$response" | jq -r '.projectStatus.conditions[] | "- \(.metricKey): \(.actualValue) (threshold: \(.errorThreshold), comparator: \(.comparator), status: \(.status))"'
        echo "==================================="

        if [ "$gate_status" = "null" ] || [ -z "$gate_status" ]; then
          echo "Quality Gate status is null or empty. Analysis may not be complete."
          echo "Response: $response"
          exit 1
        elif [ "$gate_status" = "NONE" ]; then
          echo "No Quality Gate configured for this project - treating as pass"
          echo "To configure a Quality Gate, visit: https://sonarcloud.io/project/quality_gate?id=$project_key"
        elif [ "$gate_status" != "OK" ]; then
          echo "Quality Gate failed for the following reasons:"
          echo "$response" | jq -r '.projectStatus.conditions[] | select(.status=="ERROR") | "- \(.metricKey): \(.actualValue) \(.comparator) \(.errorThreshold)"'
          exit 1
        else
          echo "Quality Gate passed successfully!"
        fi

    - name: Report SonarCloud Status
      if: always()
      run: |
        if [ "${{ steps.sonar-scan.outcome }}" == "success" ]; then
          echo "SonarCloud scan completed successfully"
        else
          echo "SonarCloud scan skipped or failed - this is expected if the project doesn't exist yet"
          echo "Visit https://sonarcloud.io to create the project: reaandrew_politest"
        fi

  semgrep:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-test, dependency-scan, gitguardian-scan]
    permissions:
      contents: read
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep:1.95.0

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
    - name: Run Semgrep analysis
      run: |
        semgrep ci \
          --config=auto \
          --exclude='*_test.go' \
          --exclude='test/**' \
          --exclude='examples/**' \
          --exclude='docs/**' \
          --max-target-bytes=1000000 \
          --metrics=off

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-test, gitguardian-scan, sonarcloud, semgrep]
    if: always() && !cancelled() && !contains(needs.*.result, 'failure')

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Setup Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        BUILD_DATE=$(date -u +%Y%m%dT%H%M%SZ)
        GIT_COMMIT=${{ github.sha }}

        go build -v -o politest \
          -ldflags="-X 'main.version=${VERSION}' \
                    -X 'main.gitCommit=${GIT_COMMIT}' \
                    -X 'main.buildDate=${BUILD_DATE}'" \
          .

    - name: Verify build artifacts
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo ""
        echo "Build info:"
        ./politest --version

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Setup Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build politest
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        BUILD_DATE=$(date -u +%Y%m%dT%H%M%SZ)
        GIT_COMMIT=${{ github.sha }}

        go build -o politest \
          -ldflags="-X 'main.version=${VERSION}' \
                    -X 'main.gitCommit=${GIT_COMMIT}' \
                    -X 'main.buildDate=${BUILD_DATE}'" \
          .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@ff717079ee2060e4bcee96c4779b553acc87447c # v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Verify AWS access
      run: aws sts get-caller-identity

    - name: Run integration tests
      run: ./test/run-tests.sh

  example-tests:
    name: Example Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Setup Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build politest
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        BUILD_DATE=$(date -u +%Y%m%dT%H%M%SZ)
        GIT_COMMIT=${{ github.sha }}

        go build -o politest \
          -ldflags="-X 'main.version=${VERSION}' \
                    -X 'main.gitCommit=${GIT_COMMIT}' \
                    -X 'main.buildDate=${BUILD_DATE}'" \
          .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@ff717079ee2060e4bcee96c4779b553acc87447c # v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Verify AWS access
      run: aws sts get-caller-identity

    - name: Run example tests
      run: |
        set -e

        echo "Running example scenario tests..."
        echo ""

        PASSED=0
        FAILED=0

        # Find all scenario files in examples directory
        while IFS= read -r -d '' scenario; do
          scenario_name=$(basename "$(dirname "$scenario")")/$(basename "$scenario")
          echo "Testing: $scenario_name"

          if ./politest --scenario "$scenario" --no-warn > /tmp/example-output.log 2>&1; then
            echo "  ✓ PASS"
            PASSED=$((PASSED + 1))
          else
            echo "  ✗ FAIL"
            echo "  Output:"
            sed 's/^/    /' /tmp/example-output.log
            FAILED=$((FAILED + 1))
          fi
          echo ""
        done < <(find examples \( -name "scenario.yml" -o -name "*.yml" \) -print0 | grep -zv "/scp/" | grep -zv "/policies/" | sort -z)

        echo "======================================"
        echo "Example Test Results: $PASSED passed, $FAILED failed"
        echo "======================================"

        if [ $FAILED -gt 0 ]; then
          exit 1
        fi

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint-and-test, gitguardian-scan, sonarcloud, semgrep, build, integration-tests, example-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      with:
        fetch-depth: 0
        # Use PAT instead of GITHUB_TOKEN to allow release events to trigger other workflows
        token: ${{ secrets.PAT_TOKEN }}

    - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
      with:
        node-version: '20'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git conventional-changelog-conventionalcommits

    - name: Run semantic-release
      env:
        # Use PAT to allow triggering SLSA workflow on release published event
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: semantic-release
